CCS PCM C Compiler, Version 5.015, 5967               27-Sep-23 11:06

               Filename:   C:\Users\soyan\proyectos_programacion\7_MM\circuito03\circuito03.lst

               ROM used:   1189 words (15%)
                           Largest free fragment is 2048
               RAM used:   10 (3%) at main() level
                           36 (10%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  04
0001:  MOVWF  0A
0002:  GOTO   428
0003:  NOP
.................... #include<16F887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
0004:  DATA 0C,29
0005:  DATA E5,30
0006:  DATA E4,3C
0007:  DATA 2E,17
0008:  DATA 2E,05
0009:  DATA 00,00
000A:  DATA 8C,21
000B:  DATA 6F,37
000C:  DATA F4,32
000D:  DATA 6F,10
000E:  DATA 25,33
000F:  DATA 20,00
0010:  DATA 45,36
0011:  DATA 20,3B
0012:  DATA 61,36
0013:  DATA 6F,39
0014:  DATA A0,35
0015:  DATA BD,12
0016:  DATA 75,00
*
0168:  MOVF   0B,W
0169:  MOVWF  22
016A:  BCF    0B.7
016B:  BSF    03.5
016C:  BSF    03.6
016D:  BSF    0C.7
016E:  BSF    0C.0
016F:  NOP
0170:  NOP
0171:  BCF    03.5
0172:  BCF    03.6
0173:  BTFSC  22.7
0174:  BSF    0B.7
0175:  BSF    03.6
0176:  MOVF   0C,W
0177:  ANDLW  7F
0178:  BTFSC  03.2
0179:  GOTO   1BC
017A:  BCF    03.6
017B:  MOVWF  22
017C:  BSF    03.6
017D:  MOVF   0D,W
017E:  BCF    03.6
017F:  MOVWF  23
0180:  BSF    03.6
0181:  MOVF   0F,W
0182:  BCF    03.6
0183:  MOVWF  24
0184:  MOVF   22,W
0185:  MOVWF  33
0186:  CALL   13C
0187:  MOVF   23,W
0188:  BSF    03.6
0189:  MOVWF  0D
018A:  BCF    03.6
018B:  MOVF   24,W
018C:  BSF    03.6
018D:  MOVWF  0F
018E:  BCF    03.6
018F:  MOVF   0B,W
0190:  MOVWF  25
0191:  BCF    0B.7
0192:  BSF    03.5
0193:  BSF    03.6
0194:  BSF    0C.7
0195:  BSF    0C.0
0196:  NOP
0197:  NOP
0198:  BCF    03.5
0199:  BCF    03.6
019A:  BTFSC  25.7
019B:  BSF    0B.7
019C:  BSF    03.6
019D:  RLF    0C,W
019E:  RLF    0E,W
019F:  ANDLW  7F
01A0:  BTFSC  03.2
01A1:  GOTO   1BC
01A2:  BCF    03.6
01A3:  MOVWF  22
01A4:  BSF    03.6
01A5:  MOVF   0D,W
01A6:  BCF    03.6
01A7:  MOVWF  23
01A8:  BSF    03.6
01A9:  MOVF   0F,W
01AA:  BCF    03.6
01AB:  MOVWF  24
01AC:  MOVF   22,W
01AD:  MOVWF  33
01AE:  CALL   13C
01AF:  MOVF   23,W
01B0:  BSF    03.6
01B1:  MOVWF  0D
01B2:  BCF    03.6
01B3:  MOVF   24,W
01B4:  BSF    03.6
01B5:  MOVWF  0F
01B6:  INCF   0D,F
01B7:  BTFSC  03.2
01B8:  INCF   0F,F
01B9:  BCF    03.6
01BA:  GOTO   168
01BB:  BSF    03.6
01BC:  BCF    03.6
01BD:  BCF    0A.3
01BE:  BCF    0A.4
01BF:  GOTO   448 (RETURN)
01C0:  MOVLW  8E
01C1:  MOVWF  77
01C2:  MOVF   23,W
01C3:  MOVWF  78
01C4:  MOVF   22,W
01C5:  MOVWF  79
01C6:  CLRF   7A
01C7:  MOVF   78,F
01C8:  BTFSS  03.2
01C9:  GOTO   1D4
01CA:  MOVF   79,W
01CB:  MOVWF  78
01CC:  CLRF   79
01CD:  MOVLW  08
01CE:  SUBWF  77,F
01CF:  MOVF   78,F
01D0:  BTFSS  03.2
01D1:  GOTO   1D4
01D2:  CLRF   77
01D3:  GOTO   1DC
01D4:  BCF    03.0
01D5:  BTFSC  78.7
01D6:  GOTO   1DB
01D7:  RLF    79,F
01D8:  RLF    78,F
01D9:  DECF   77,F
01DA:  GOTO   1D4
01DB:  BCF    78.7
01DC:  BCF    0A.3
01DD:  BCF    0A.4
01DE:  GOTO   453 (RETURN)
01DF:  MOVF   33,W
01E0:  BTFSC  03.2
01E1:  GOTO   24F
01E2:  MOVWF  3B
01E3:  MOVF   37,W
01E4:  BTFSC  03.2
01E5:  GOTO   24F
01E6:  ADDWF  3B,F
01E7:  BTFSC  03.0
01E8:  GOTO   1F0
01E9:  MOVLW  7F
01EA:  SUBWF  3B,F
01EB:  BTFSS  03.0
01EC:  GOTO   24F
01ED:  BTFSC  03.2
01EE:  GOTO   24F
01EF:  GOTO   1F4
01F0:  MOVLW  81
01F1:  ADDWF  3B,F
01F2:  BTFSC  03.0
01F3:  GOTO   24F
01F4:  MOVF   3B,W
01F5:  MOVWF  77
01F6:  CLRF   78
01F7:  CLRF   79
01F8:  CLRF   7A
01F9:  MOVF   34,W
01FA:  MOVWF  3F
01FB:  BSF    3F.7
01FC:  MOVF   35,W
01FD:  MOVWF  3E
01FE:  MOVF   36,W
01FF:  MOVWF  3D
0200:  MOVLW  18
0201:  MOVWF  3B
0202:  CLRF   3C
0203:  BTFSS  3D.0
0204:  GOTO   21D
0205:  MOVF   3A,W
0206:  ADDWF  7A,F
0207:  BTFSS  03.0
0208:  GOTO   20F
0209:  INCF   79,F
020A:  BTFSS  03.2
020B:  GOTO   20F
020C:  INCF   78,F
020D:  BTFSC  03.2
020E:  BSF    3C.7
020F:  MOVF   39,W
0210:  ADDWF  79,F
0211:  BTFSS  03.0
0212:  GOTO   216
0213:  INCF   78,F
0214:  BTFSC  03.2
0215:  BSF    3C.7
0216:  MOVF   38,W
0217:  MOVWF  35
0218:  BSF    35.7
0219:  MOVF   35,W
021A:  ADDWF  78,F
021B:  BTFSC  03.0
021C:  BSF    3C.7
021D:  RLF    3C,F
021E:  RRF    78,F
021F:  RRF    79,F
0220:  RRF    7A,F
0221:  RRF    3F,F
0222:  RRF    3E,F
0223:  RRF    3D,F
0224:  BCF    03.0
0225:  DECFSZ 3B,F
0226:  GOTO   202
0227:  MOVLW  01
0228:  ADDWF  77,F
0229:  BTFSC  03.0
022A:  GOTO   24F
022B:  BTFSC  78.7
022C:  GOTO   234
022D:  RLF    3F,F
022E:  RLF    7A,F
022F:  RLF    79,F
0230:  RLF    78,F
0231:  DECF   77,F
0232:  BTFSC  03.2
0233:  GOTO   24F
0234:  BTFSS  3F.7
0235:  GOTO   245
0236:  INCF   7A,F
0237:  BTFSS  03.2
0238:  GOTO   245
0239:  INCF   79,F
023A:  BTFSS  03.2
023B:  GOTO   245
023C:  INCF   78,F
023D:  BTFSS  03.2
023E:  GOTO   245
023F:  RRF    78,F
0240:  RRF    79,F
0241:  RRF    7A,F
0242:  INCF   77,F
0243:  BTFSC  03.2
0244:  GOTO   24F
0245:  MOVF   34,W
0246:  MOVWF  3C
0247:  MOVF   38,W
0248:  XORWF  3C,F
0249:  BTFSS  3C.7
024A:  GOTO   24D
024B:  BSF    78.7
024C:  GOTO   253
024D:  BCF    78.7
024E:  GOTO   253
024F:  CLRF   77
0250:  CLRF   78
0251:  CLRF   79
0252:  CLRF   7A
0253:  RETURN
0254:  MOVF   0B,W
0255:  MOVWF  27
0256:  BCF    0B.7
0257:  BSF    03.5
0258:  BSF    03.6
0259:  BSF    0C.7
025A:  BSF    0C.0
025B:  NOP
025C:  NOP
025D:  BCF    03.5
025E:  BCF    03.6
025F:  BTFSC  27.7
0260:  BSF    0B.7
0261:  BTFSC  03.0
0262:  GOTO   28B
0263:  BSF    03.6
0264:  MOVF   0C,W
0265:  ANDLW  7F
0266:  BCF    03.6
0267:  MOVWF  27
0268:  BSF    03.6
0269:  MOVF   0D,W
026A:  BCF    03.6
026B:  MOVWF  28
026C:  BSF    03.6
026D:  MOVF   0F,W
026E:  BCF    03.6
026F:  MOVWF  29
0270:  MOVF   27,W
0271:  MOVWF  33
0272:  CALL   13C
0273:  MOVF   28,W
0274:  BSF    03.6
0275:  MOVWF  0D
0276:  BCF    03.6
0277:  MOVF   29,W
0278:  BSF    03.6
0279:  MOVWF  0F
027A:  BCF    03.6
027B:  MOVF   0B,W
027C:  MOVWF  2A
027D:  BCF    0B.7
027E:  BSF    03.5
027F:  BSF    03.6
0280:  BSF    0C.7
0281:  BSF    0C.0
0282:  NOP
0283:  NOP
0284:  BCF    03.5
0285:  BCF    03.6
0286:  BTFSC  2A.7
0287:  BSF    0B.7
0288:  DECFSZ 26,F
0289:  GOTO   28B
028A:  GOTO   2AA
028B:  BSF    03.6
028C:  RLF    0C,W
028D:  RLF    0E,W
028E:  ANDLW  7F
028F:  BCF    03.6
0290:  MOVWF  27
0291:  BSF    03.6
0292:  MOVF   0D,W
0293:  BCF    03.6
0294:  MOVWF  28
0295:  BSF    03.6
0296:  MOVF   0F,W
0297:  BCF    03.6
0298:  MOVWF  29
0299:  MOVF   27,W
029A:  MOVWF  33
029B:  CALL   13C
029C:  MOVF   28,W
029D:  BSF    03.6
029E:  MOVWF  0D
029F:  BCF    03.6
02A0:  MOVF   29,W
02A1:  BSF    03.6
02A2:  MOVWF  0F
02A3:  INCF   0D,F
02A4:  BTFSC  03.2
02A5:  INCF   0F,F
02A6:  BCF    03.0
02A7:  BCF    03.6
02A8:  DECFSZ 26,F
02A9:  GOTO   254
02AA:  RETURN
02AB:  BTFSC  03.1
02AC:  GOTO   2B0
02AD:  MOVLW  3B
02AE:  MOVWF  04
02AF:  BCF    03.7
02B0:  CLRF   77
02B1:  CLRF   78
02B2:  CLRF   79
02B3:  CLRF   7A
02B4:  CLRF   3B
02B5:  CLRF   3C
02B6:  CLRF   3D
02B7:  CLRF   3E
02B8:  MOVF   3A,W
02B9:  IORWF  39,W
02BA:  IORWF  38,W
02BB:  IORWF  37,W
02BC:  BTFSC  03.2
02BD:  GOTO   2EE
02BE:  MOVLW  20
02BF:  MOVWF  3F
02C0:  BCF    03.0
02C1:  RLF    33,F
02C2:  RLF    34,F
02C3:  RLF    35,F
02C4:  RLF    36,F
02C5:  RLF    3B,F
02C6:  RLF    3C,F
02C7:  RLF    3D,F
02C8:  RLF    3E,F
02C9:  MOVF   3A,W
02CA:  SUBWF  3E,W
02CB:  BTFSS  03.2
02CC:  GOTO   2D7
02CD:  MOVF   39,W
02CE:  SUBWF  3D,W
02CF:  BTFSS  03.2
02D0:  GOTO   2D7
02D1:  MOVF   38,W
02D2:  SUBWF  3C,W
02D3:  BTFSS  03.2
02D4:  GOTO   2D7
02D5:  MOVF   37,W
02D6:  SUBWF  3B,W
02D7:  BTFSS  03.0
02D8:  GOTO   2E8
02D9:  MOVF   37,W
02DA:  SUBWF  3B,F
02DB:  MOVF   38,W
02DC:  BTFSS  03.0
02DD:  INCFSZ 38,W
02DE:  SUBWF  3C,F
02DF:  MOVF   39,W
02E0:  BTFSS  03.0
02E1:  INCFSZ 39,W
02E2:  SUBWF  3D,F
02E3:  MOVF   3A,W
02E4:  BTFSS  03.0
02E5:  INCFSZ 3A,W
02E6:  SUBWF  3E,F
02E7:  BSF    03.0
02E8:  RLF    77,F
02E9:  RLF    78,F
02EA:  RLF    79,F
02EB:  RLF    7A,F
02EC:  DECFSZ 3F,F
02ED:  GOTO   2C0
02EE:  MOVF   3B,W
02EF:  MOVWF  00
02F0:  INCF   04,F
02F1:  MOVF   3C,W
02F2:  MOVWF  00
02F3:  INCF   04,F
02F4:  MOVF   3D,W
02F5:  MOVWF  00
02F6:  INCF   04,F
02F7:  MOVF   3E,W
02F8:  MOVWF  00
02F9:  RETURN
02FA:  MOVF   04,W
02FB:  MOVWF  2B
02FC:  MOVF   2A,W
02FD:  MOVWF  2D
02FE:  BTFSC  03.2
02FF:  GOTO   319
0300:  MOVF   29,W
0301:  MOVWF  36
0302:  MOVF   28,W
0303:  MOVWF  35
0304:  MOVF   27,W
0305:  MOVWF  34
0306:  MOVF   26,W
0307:  MOVWF  33
0308:  CLRF   3A
0309:  CLRF   39
030A:  MOVLW  20
030B:  MOVWF  38
030C:  MOVLW  82
030D:  MOVWF  37
030E:  CALL   1DF
030F:  MOVF   7A,W
0310:  MOVWF  29
0311:  MOVF   79,W
0312:  MOVWF  28
0313:  MOVF   78,W
0314:  MOVWF  27
0315:  MOVF   77,W
0316:  MOVWF  26
0317:  DECFSZ 2D,F
0318:  GOTO   300
0319:  MOVF   29,W
031A:  MOVWF  36
031B:  MOVF   28,W
031C:  MOVWF  35
031D:  MOVF   27,W
031E:  MOVWF  34
031F:  MOVF   26,W
0320:  MOVWF  33
0321:  MOVF   33,W
0322:  SUBLW  B6
0323:  MOVWF  33
0324:  CLRF   7A
0325:  MOVF   34,W
0326:  MOVWF  37
0327:  BSF    34.7
0328:  BCF    03.0
0329:  RRF    34,F
032A:  RRF    35,F
032B:  RRF    36,F
032C:  RRF    7A,F
032D:  RRF    79,F
032E:  RRF    78,F
032F:  RRF    77,F
0330:  DECFSZ 33,F
0331:  GOTO   328
0332:  BTFSS  37.7
0333:  GOTO   33F
0334:  COMF   77,F
0335:  COMF   78,F
0336:  COMF   79,F
0337:  COMF   7A,F
0338:  INCF   77,F
0339:  BTFSC  03.2
033A:  INCF   78,F
033B:  BTFSC  03.2
033C:  INCF   79,F
033D:  BTFSC  03.2
033E:  INCF   7A,F
033F:  MOVF   7A,W
0340:  MOVWF  29
0341:  MOVF   79,W
0342:  MOVWF  28
0343:  MOVF   78,W
0344:  MOVWF  27
0345:  MOVF   77,W
0346:  MOVWF  26
0347:  BTFSS  29.7
0348:  GOTO   356
0349:  DECF   2B,F
034A:  BSF    2B.5
034B:  COMF   26,F
034C:  COMF   27,F
034D:  COMF   28,F
034E:  COMF   29,F
034F:  INCF   26,F
0350:  BTFSC  03.2
0351:  INCF   27,F
0352:  BTFSC  03.2
0353:  INCF   28,F
0354:  BTFSC  03.2
0355:  INCF   29,F
0356:  MOVLW  3B
0357:  MOVWF  32
0358:  MOVLW  9A
0359:  MOVWF  31
035A:  MOVLW  CA
035B:  MOVWF  30
035C:  CLRF   2F
035D:  MOVLW  0A
035E:  MOVWF  2D
035F:  MOVF   2A,W
0360:  BTFSC  03.2
0361:  INCF   2B,F
0362:  BSF    03.1
0363:  MOVLW  26
0364:  MOVWF  04
0365:  BCF    03.7
0366:  MOVF   29,W
0367:  MOVWF  36
0368:  MOVF   28,W
0369:  MOVWF  35
036A:  MOVF   27,W
036B:  MOVWF  34
036C:  MOVF   26,W
036D:  MOVWF  33
036E:  MOVF   32,W
036F:  MOVWF  3A
0370:  MOVF   31,W
0371:  MOVWF  39
0372:  MOVF   30,W
0373:  MOVWF  38
0374:  MOVF   2F,W
0375:  MOVWF  37
0376:  CALL   2AB
0377:  MOVF   78,W
0378:  MOVF   77,F
0379:  BTFSS  03.2
037A:  GOTO   38E
037B:  INCF   2A,W
037C:  SUBWF  2D,W
037D:  BTFSC  03.2
037E:  GOTO   38E
037F:  MOVF   2B,W
0380:  BTFSC  03.2
0381:  GOTO   390
0382:  ANDLW  0F
0383:  SUBWF  2D,W
0384:  BTFSC  03.2
0385:  GOTO   388
0386:  BTFSC  03.0
0387:  GOTO   3C0
0388:  BTFSC  2B.7
0389:  GOTO   3C0
038A:  BTFSC  2B.6
038B:  GOTO   390
038C:  MOVLW  20
038D:  GOTO   3BC
038E:  MOVLW  20
038F:  ANDWF  2B,F
0390:  BTFSS  2B.5
0391:  GOTO   39E
0392:  BCF    2B.5
0393:  MOVF   2A,W
0394:  BTFSS  03.2
0395:  DECF   2B,F
0396:  MOVF   77,W
0397:  MOVWF  2B
0398:  MOVLW  2D
0399:  MOVWF  33
039A:  CALL   13C
039B:  MOVF   2B,W
039C:  MOVWF  77
039D:  CLRF   2B
039E:  MOVF   2A,W
039F:  SUBWF  2D,W
03A0:  BTFSS  03.2
03A1:  GOTO   3AC
03A2:  MOVF   77,W
03A3:  MOVWF  2B
03A4:  MOVLW  2E
03A5:  MOVWF  33
03A6:  CALL   13C
03A7:  MOVF   2B,W
03A8:  MOVWF  77
03A9:  MOVLW  20
03AA:  ANDWF  2B,F
03AB:  MOVLW  00
03AC:  MOVLW  30
03AD:  BTFSS  2B.5
03AE:  GOTO   3BC
03AF:  BCF    2B.5
03B0:  MOVF   2A,W
03B1:  BTFSS  03.2
03B2:  DECF   2B,F
03B3:  MOVF   77,W
03B4:  MOVWF  2B
03B5:  MOVLW  2D
03B6:  MOVWF  33
03B7:  CALL   13C
03B8:  MOVF   2B,W
03B9:  MOVWF  77
03BA:  CLRF   2B
03BB:  MOVLW  30
03BC:  ADDWF  77,F
03BD:  MOVF   77,W
03BE:  MOVWF  33
03BF:  CALL   13C
03C0:  BCF    03.1
03C1:  MOVF   32,W
03C2:  MOVWF  36
03C3:  MOVF   31,W
03C4:  MOVWF  35
03C5:  MOVF   30,W
03C6:  MOVWF  34
03C7:  MOVF   2F,W
03C8:  MOVWF  33
03C9:  CLRF   3A
03CA:  CLRF   39
03CB:  CLRF   38
03CC:  MOVLW  0A
03CD:  MOVWF  37
03CE:  CALL   2AB
03CF:  MOVF   7A,W
03D0:  MOVWF  32
03D1:  MOVF   79,W
03D2:  MOVWF  31
03D3:  MOVF   78,W
03D4:  MOVWF  30
03D5:  MOVF   77,W
03D6:  MOVWF  2F
03D7:  DECFSZ 2D,F
03D8:  GOTO   362
03D9:  BCF    0A.3
03DA:  BCF    0A.4
03DB:  GOTO   482 (RETURN)
03DC:  MOVF   26,W
03DD:  CLRF   78
03DE:  SUBWF  25,W
03DF:  BTFSC  03.0
03E0:  GOTO   3E4
03E1:  MOVF   25,W
03E2:  MOVWF  77
03E3:  GOTO   3F0
03E4:  CLRF   77
03E5:  MOVLW  08
03E6:  MOVWF  27
03E7:  RLF    25,F
03E8:  RLF    77,F
03E9:  MOVF   26,W
03EA:  SUBWF  77,W
03EB:  BTFSC  03.0
03EC:  MOVWF  77
03ED:  RLF    78,F
03EE:  DECFSZ 27,F
03EF:  GOTO   3E7
03F0:  RETURN
03F1:  MOVF   78,W
03F2:  MOVF   23,W
03F3:  MOVWF  25
03F4:  MOVLW  64
03F5:  MOVWF  26
03F6:  CALL   3DC
03F7:  MOVF   77,W
03F8:  MOVWF  23
03F9:  MOVF   78,W
03FA:  MOVLW  30
03FB:  BTFSS  03.2
03FC:  GOTO   404
03FD:  BTFSS  24.1
03FE:  GOTO   40B
03FF:  BTFSC  24.3
0400:  GOTO   40B
0401:  BTFSC  24.4
0402:  MOVLW  20
0403:  GOTO   407
0404:  BCF    24.3
0405:  BCF    24.4
0406:  BSF    24.0
0407:  ADDWF  78,F
0408:  MOVF   78,W
0409:  MOVWF  33
040A:  CALL   13C
040B:  MOVF   23,W
040C:  MOVWF  25
040D:  MOVLW  0A
040E:  MOVWF  26
040F:  CALL   3DC
0410:  MOVF   77,W
0411:  MOVWF  23
0412:  MOVF   78,W
0413:  MOVLW  30
0414:  BTFSS  03.2
0415:  GOTO   41C
0416:  BTFSC  24.3
0417:  GOTO   420
0418:  BTFSS  24.0
0419:  GOTO   420
041A:  BTFSC  24.4
041B:  MOVLW  20
041C:  ADDWF  78,F
041D:  MOVF   78,W
041E:  MOVWF  33
041F:  CALL   13C
0420:  MOVLW  30
0421:  ADDWF  23,F
0422:  MOVF   23,W
0423:  MOVWF  33
0424:  CALL   13C
0425:  BCF    0A.3
0426:  BCF    0A.4
0427:  GOTO   49C (RETURN)
....................  
.................... #list 
....................  
.................... #fuses INTRC_IO, NOWDT, PROTECT, NOLVP, MCLR, NOLVP, NOBROWNOUT 
.................... #use delay(INTERNAL=4000000) 
*
0017:  MOVLW  34
0018:  MOVWF  04
0019:  BCF    03.7
001A:  MOVF   00,W
001B:  BTFSC  03.2
001C:  GOTO   02B
001D:  MOVLW  01
001E:  MOVWF  78
001F:  CLRF   77
0020:  DECFSZ 77,F
0021:  GOTO   020
0022:  DECFSZ 78,F
0023:  GOTO   01F
0024:  MOVLW  4A
0025:  MOVWF  77
0026:  DECFSZ 77,F
0027:  GOTO   026
0028:  GOTO   029
0029:  DECFSZ 00,F
002A:  GOTO   01D
002B:  RETURN
....................  
.................... // se definen las macros simpre antes de llamar a la biblioteca debido a las directivas del lenguaje 
.................... // basicamente es establecer como se conectara la lcd con el micro 
.................... #define LCD_ENABLE_PIN  PIN_E0 
.................... #define LCD_RS_PIN      PIN_E1 
.................... #define LCD_RW_PIN      PIN_E2 
.................... #define LCD_DATA4       PIN_D4 
.................... #define LCD_DATA5       PIN_D5 
.................... #define LCD_DATA6       PIN_D6 
.................... #define LCD_DATA7       PIN_D7 
....................  
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
0090:  BSF    08.4
....................    output_float(LCD_DATA5); 
0091:  BSF    08.5
....................    output_float(LCD_DATA6); 
0092:  BSF    08.6
....................    output_float(LCD_DATA7); 
0093:  BSF    08.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0094:  BCF    03.5
0095:  BSF    09.2
0096:  BSF    03.5
0097:  BCF    09.2
....................    delay_cycles(1); 
0098:  NOP
....................    lcd_output_enable(1); 
0099:  BCF    03.5
009A:  BSF    09.0
009B:  BSF    03.5
009C:  BCF    09.0
....................    delay_cycles(1); 
009D:  NOP
....................    high = lcd_read_nibble(); 
009E:  BCF    03.5
009F:  CALL   057
00A0:  MOVF   78,W
00A1:  MOVWF  3B
....................        
....................    lcd_output_enable(0); 
00A2:  BCF    09.0
00A3:  BSF    03.5
00A4:  BCF    09.0
....................    delay_cycles(1); 
00A5:  NOP
....................    lcd_output_enable(1); 
00A6:  BCF    03.5
00A7:  BSF    09.0
00A8:  BSF    03.5
00A9:  BCF    09.0
....................    delay_us(1); 
00AA:  NOP
....................    low = lcd_read_nibble(); 
00AB:  BCF    03.5
00AC:  CALL   057
00AD:  MOVF   78,W
00AE:  MOVWF  3A
....................        
....................    lcd_output_enable(0); 
00AF:  BCF    09.0
00B0:  BSF    03.5
00B1:  BCF    09.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00B2:  BCF    08.4
....................    output_drive(LCD_DATA5); 
00B3:  BCF    08.5
....................    output_drive(LCD_DATA6); 
00B4:  BCF    08.6
....................    output_drive(LCD_DATA7); 
00B5:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00B6:  BCF    03.5
00B7:  SWAPF  3B,W
00B8:  MOVWF  77
00B9:  MOVLW  F0
00BA:  ANDWF  77,F
00BB:  MOVF   77,W
00BC:  IORWF  3A,W
00BD:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
0057:  CLRF   3C
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
0058:  BSF    03.5
0059:  BSF    08.4
005A:  MOVLW  00
005B:  BCF    03.5
005C:  BTFSC  08.4
005D:  MOVLW  01
005E:  IORWF  3C,F
....................    n |= input(LCD_DATA5) << 1; 
005F:  BSF    03.5
0060:  BSF    08.5
0061:  MOVLW  00
0062:  BCF    03.5
0063:  BTFSC  08.5
0064:  MOVLW  01
0065:  MOVWF  77
0066:  BCF    03.0
0067:  RLF    77,F
0068:  MOVF   77,W
0069:  IORWF  3C,F
....................    n |= input(LCD_DATA6) << 2; 
006A:  BSF    03.5
006B:  BSF    08.6
006C:  MOVLW  00
006D:  BCF    03.5
006E:  BTFSC  08.6
006F:  MOVLW  01
0070:  MOVWF  77
0071:  RLF    77,F
0072:  RLF    77,F
0073:  MOVLW  FC
0074:  ANDWF  77,F
0075:  MOVF   77,W
0076:  IORWF  3C,F
....................    n |= input(LCD_DATA7) << 3; 
0077:  BSF    03.5
0078:  BSF    08.7
0079:  MOVLW  00
007A:  BCF    03.5
007B:  BTFSC  08.7
007C:  MOVLW  01
007D:  MOVWF  77
007E:  RLF    77,F
007F:  RLF    77,F
0080:  RLF    77,F
0081:  MOVLW  F8
0082:  ANDWF  77,F
0083:  MOVF   77,W
0084:  IORWF  3C,F
....................     
....................    return(n); 
0085:  MOVF   3C,W
0086:  MOVWF  78
....................   #else 
0087:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
002C:  BTFSC  3B.0
002D:  GOTO   030
002E:  BCF    08.4
002F:  GOTO   031
0030:  BSF    08.4
0031:  BSF    03.5
0032:  BCF    08.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
0033:  BCF    03.5
0034:  BTFSC  3B.1
0035:  GOTO   038
0036:  BCF    08.5
0037:  GOTO   039
0038:  BSF    08.5
0039:  BSF    03.5
003A:  BCF    08.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
003B:  BCF    03.5
003C:  BTFSC  3B.2
003D:  GOTO   040
003E:  BCF    08.6
003F:  GOTO   041
0040:  BSF    08.6
0041:  BSF    03.5
0042:  BCF    08.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
0043:  BCF    03.5
0044:  BTFSC  3B.3
0045:  GOTO   048
0046:  BCF    08.7
0047:  GOTO   049
0048:  BSF    08.7
0049:  BSF    03.5
004A:  BCF    08.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
004B:  NOP
....................    lcd_output_enable(1); 
004C:  BCF    03.5
004D:  BSF    09.0
004E:  BSF    03.5
004F:  BCF    09.0
....................    delay_us(2); 
0050:  GOTO   051
....................    lcd_output_enable(0); 
0051:  BCF    03.5
0052:  BCF    09.0
0053:  BSF    03.5
0054:  BCF    09.0
0055:  BCF    03.5
0056:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0088:  BSF    03.5
0089:  BCF    09.0
....................    lcd_rs_tris(); 
008A:  BCF    09.1
....................    lcd_rw_tris(); 
008B:  BCF    09.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
008C:  BCF    03.5
008D:  BCF    09.1
008E:  BSF    03.5
008F:  BCF    09.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00BE:  MOVF   78,W
00BF:  MOVWF  3A
00C0:  BTFSS  3A.7
00C1:  GOTO   0C4
00C2:  BSF    03.5
00C3:  GOTO   090
....................    lcd_output_rs(address); 
00C4:  MOVF   38,F
00C5:  BTFSS  03.2
00C6:  GOTO   0C9
00C7:  BCF    09.1
00C8:  GOTO   0CA
00C9:  BSF    09.1
00CA:  BSF    03.5
00CB:  BCF    09.1
....................    delay_cycles(1); 
00CC:  NOP
....................    lcd_output_rw(0); 
00CD:  BCF    03.5
00CE:  BCF    09.2
00CF:  BSF    03.5
00D0:  BCF    09.2
....................    delay_cycles(1); 
00D1:  NOP
....................    lcd_output_enable(0); 
00D2:  BCF    03.5
00D3:  BCF    09.0
00D4:  BSF    03.5
00D5:  BCF    09.0
....................    lcd_send_nibble(n >> 4); 
00D6:  BCF    03.5
00D7:  SWAPF  39,W
00D8:  MOVWF  3A
00D9:  MOVLW  0F
00DA:  ANDWF  3A,F
00DB:  MOVF   3A,W
00DC:  MOVWF  3B
00DD:  CALL   02C
....................    lcd_send_nibble(n & 0xf); 
00DE:  MOVF   39,W
00DF:  ANDLW  0F
00E0:  MOVWF  3A
00E1:  MOVWF  3B
00E2:  CALL   02C
00E3:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
00E4:  MOVLW  28
00E5:  MOVWF  23
00E6:  MOVLW  0C
00E7:  MOVWF  24
00E8:  MOVLW  01
00E9:  MOVWF  25
00EA:  MOVLW  06
00EB:  MOVWF  26
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
00EC:  BCF    09.0
00ED:  BSF    03.5
00EE:  BCF    09.0
....................    lcd_output_rs(0); 
00EF:  BCF    03.5
00F0:  BCF    09.1
00F1:  BSF    03.5
00F2:  BCF    09.1
....................    lcd_output_rw(0); 
00F3:  BCF    03.5
00F4:  BCF    09.2
00F5:  BSF    03.5
00F6:  BCF    09.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00F7:  BCF    08.4
....................    output_drive(LCD_DATA5); 
00F8:  BCF    08.5
....................    output_drive(LCD_DATA6); 
00F9:  BCF    08.6
....................    output_drive(LCD_DATA7); 
00FA:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
00FB:  BCF    09.0
....................    lcd_rs_tris(); 
00FC:  BCF    09.1
....................    lcd_rw_tris(); 
00FD:  BCF    09.2
....................  #endif 
....................      
....................    delay_ms(15); 
00FE:  MOVLW  0F
00FF:  BCF    03.5
0100:  MOVWF  34
0101:  CALL   017
....................    for(i=1;i<=3;++i) 
0102:  MOVLW  01
0103:  MOVWF  22
0104:  MOVF   22,W
0105:  SUBLW  03
0106:  BTFSS  03.0
0107:  GOTO   110
....................    { 
....................        lcd_send_nibble(3); 
0108:  MOVLW  03
0109:  MOVWF  3B
010A:  CALL   02C
....................        delay_ms(5); 
010B:  MOVLW  05
010C:  MOVWF  34
010D:  CALL   017
010E:  INCF   22,F
010F:  GOTO   104
....................    } 
....................     
....................    lcd_send_nibble(2); 
0110:  MOVLW  02
0111:  MOVWF  3B
0112:  CALL   02C
....................    delay_ms(5); 
0113:  MOVLW  05
0114:  MOVWF  34
0115:  CALL   017
....................    for(i=0;i<=3;++i) 
0116:  CLRF   22
0117:  MOVF   22,W
0118:  SUBLW  03
0119:  BTFSS  03.0
011A:  GOTO   127
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
011B:  MOVLW  23
011C:  ADDWF  22,W
011D:  MOVWF  04
011E:  BCF    03.7
011F:  MOVF   00,W
0120:  MOVWF  27
0121:  CLRF   38
0122:  MOVF   27,W
0123:  MOVWF  39
0124:  CALL   088
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0125:  INCF   22,F
0126:  GOTO   117
0127:  BCF    0A.3
0128:  BCF    0A.4
0129:  GOTO   441 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
012A:  DECFSZ 35,W
012B:  GOTO   12D
012C:  GOTO   130
....................       address=LCD_LINE_TWO; 
012D:  MOVLW  40
012E:  MOVWF  36
012F:  GOTO   131
....................    else 
....................       address=0; 
0130:  CLRF   36
....................       
....................    address+=x-1; 
0131:  MOVLW  01
0132:  SUBWF  34,W
0133:  ADDWF  36,F
....................    lcd_send_byte(0,0x80|address); 
0134:  MOVF   36,W
0135:  IORLW  80
0136:  MOVWF  37
0137:  CLRF   38
0138:  MOVF   37,W
0139:  MOVWF  39
013A:  CALL   088
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
013B:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
013C:  MOVF   33,W
013D:  XORLW  07
013E:  BTFSC  03.2
013F:  GOTO   14A
0140:  XORLW  0B
0141:  BTFSC  03.2
0142:  GOTO   14F
0143:  XORLW  06
0144:  BTFSC  03.2
0145:  GOTO   157
0146:  XORLW  02
0147:  BTFSC  03.2
0148:  GOTO   15D
0149:  GOTO   162
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
014A:  MOVLW  01
014B:  MOVWF  34
014C:  MOVWF  35
014D:  CALL   12A
014E:  GOTO   167
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
014F:  CLRF   38
0150:  MOVLW  01
0151:  MOVWF  39
0152:  CALL   088
....................                      delay_ms(2); 
0153:  MOVLW  02
0154:  MOVWF  34
0155:  CALL   017
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0156:  GOTO   167
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0157:  MOVLW  01
0158:  MOVWF  34
0159:  MOVLW  02
015A:  MOVWF  35
015B:  CALL   12A
015C:  GOTO   167
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
015D:  CLRF   38
015E:  MOVLW  10
015F:  MOVWF  39
0160:  CALL   088
0161:  GOTO   167
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0162:  MOVLW  01
0163:  MOVWF  38
0164:  MOVF   33,W
0165:  MOVWF  39
0166:  CALL   088
....................      #endif 
....................    } 
0167:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... void main(){ 
*
0428:  MOVF   03,W
0429:  ANDLW  1F
042A:  MOVWF  03
042B:  MOVLW  61
042C:  BSF    03.5
042D:  MOVWF  0F
042E:  MOVF   0F,W
042F:  BSF    03.6
0430:  MOVF   09,W
0431:  ANDLW  C0
0432:  MOVWF  09
0433:  BCF    03.6
0434:  BCF    1F.4
0435:  BCF    1F.5
0436:  MOVLW  00
0437:  BSF    03.6
0438:  MOVWF  08
0439:  BCF    03.5
043A:  CLRF   07
043B:  CLRF   08
043C:  CLRF   09
043D:  BCF    03.7
043E:  BCF    03.6
043F:  CLRF   21
....................    char k=0; 
....................     
....................     
....................    lcd_init(); 
0440:  GOTO   0E4
....................    lcd_putc("\fReady...\n"); 
0441:  MOVLW  04
0442:  BSF    03.6
0443:  MOVWF  0D
0444:  MOVLW  00
0445:  MOVWF  0F
0446:  BCF    03.6
0447:  GOTO   168
....................    delay_ms(1000); 
0448:  MOVLW  04
0449:  MOVWF  22
044A:  MOVLW  FA
044B:  MOVWF  34
044C:  CALL   017
044D:  DECFSZ 22,F
044E:  GOTO   44A
....................     
....................    while(TRUE){ 
....................       
....................       printf(LCD_PUTC,"\fConteo %f ", 3.3*k); 
044F:  CLRF   23
0450:  MOVF   21,W
0451:  MOVWF  22
0452:  GOTO   1C0
0453:  MOVLW  33
0454:  MOVWF  36
0455:  MOVWF  35
0456:  MOVLW  53
0457:  MOVWF  34
0458:  MOVLW  80
0459:  MOVWF  33
045A:  MOVF   7A,W
045B:  MOVWF  3A
045C:  MOVF   79,W
045D:  MOVWF  39
045E:  MOVF   78,W
045F:  MOVWF  38
0460:  MOVF   77,W
0461:  MOVWF  37
0462:  CALL   1DF
0463:  MOVF   7A,W
0464:  MOVWF  25
0465:  MOVF   79,W
0466:  MOVWF  24
0467:  MOVF   78,W
0468:  MOVWF  23
0469:  MOVF   77,W
046A:  MOVWF  22
046B:  MOVLW  0A
046C:  BSF    03.6
046D:  MOVWF  0D
046E:  MOVLW  00
046F:  MOVWF  0F
0470:  BCF    03.0
0471:  MOVLW  08
0472:  BCF    03.6
0473:  MOVWF  26
0474:  CALL   254
0475:  MOVLW  89
0476:  MOVWF  04
0477:  MOVF   25,W
0478:  MOVWF  29
0479:  MOVF   24,W
047A:  MOVWF  28
047B:  MOVF   23,W
047C:  MOVWF  27
047D:  MOVF   22,W
047E:  MOVWF  26
047F:  MOVLW  02
0480:  MOVWF  2A
0481:  GOTO   2FA
0482:  MOVLW  20
0483:  MOVWF  33
0484:  CALL   13C
....................       lcd_gotoxy(1,2); 
0485:  MOVLW  01
0486:  MOVWF  34
0487:  MOVLW  02
0488:  MOVWF  35
0489:  CALL   12A
....................       printf(LCD_PUTC, "El valor k=%u",k++); 
048A:  MOVF   21,W
048B:  INCF   21,F
048C:  MOVWF  22
048D:  MOVLW  10
048E:  BSF    03.6
048F:  MOVWF  0D
0490:  MOVLW  00
0491:  MOVWF  0F
0492:  BCF    03.0
0493:  MOVLW  0B
0494:  BCF    03.6
0495:  MOVWF  26
0496:  CALL   254
0497:  MOVF   22,W
0498:  MOVWF  23
0499:  MOVLW  1B
049A:  MOVWF  24
049B:  GOTO   3F1
....................       delay_ms(500); 
049C:  MOVLW  02
049D:  MOVWF  22
049E:  MOVLW  FA
049F:  MOVWF  34
04A0:  CALL   017
04A1:  DECFSZ 22,F
04A2:  GOTO   49E
04A3:  GOTO   44F
....................        
....................    } 
.................... } 
04A4:  SLEEP

Configuration Fuses:
   Word  1: 2CA4   INTRC_IO NOWDT PUT MCLR PROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
