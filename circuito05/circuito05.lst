CCS PCM C Compiler, Version 5.015, 5967               29-Sep-23 00:44

               Filename:   C:\Users\soyan\proyectos_programacion\7_MM\circuito05\circuito05.lst

               ROM used:   788 words (10%)
                           Largest free fragment is 2048
               RAM used:   8 (2%) at main() level
                           22 (6%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   1FC
0003:  NOP
.................... #include<16F887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
0004:  DATA 0C,29
0005:  DATA E5,30
0006:  DATA E4,3C
0007:  DATA 2E,17
0008:  DATA 2E,05
0009:  DATA 00,00
000A:  DATA D2,32
000B:  DATA F0,37
000C:  DATA F3,37
000D:  DATA 00,01
000E:  DATA D6,32
000F:  DATA EC,1E
0010:  DATA 30,00
0011:  DATA C4,32
0012:  DATA F2,32
0013:  DATA 63,34
0014:  DATA 61,00
0015:  DATA D6,32
0016:  DATA EC,1E
0017:  DATA A5,3A
0018:  DATA 00,00
0019:  DATA 49,3D
001A:  DATA F1,3A
001B:  DATA E9,32
001C:  DATA 72,32
001D:  DATA 61,00
001E:  DATA D6,32
001F:  DATA EC,1E
0020:  DATA A5,3A
0021:  DATA 00,00
*
0105:  MOVF   0B,W
0106:  MOVWF  22
0107:  BCF    0B.7
0108:  BSF    03.5
0109:  BSF    03.6
010A:  BSF    0C.7
010B:  BSF    0C.0
010C:  NOP
010D:  NOP
010E:  BCF    03.5
010F:  BCF    03.6
0110:  BTFSC  22.7
0111:  BSF    0B.7
0112:  BSF    03.6
0113:  MOVF   0C,W
0114:  ANDLW  7F
0115:  BTFSC  03.2
0116:  GOTO   159
0117:  BCF    03.6
0118:  MOVWF  22
0119:  BSF    03.6
011A:  MOVF   0D,W
011B:  BCF    03.6
011C:  MOVWF  23
011D:  BSF    03.6
011E:  MOVF   0F,W
011F:  BCF    03.6
0120:  MOVWF  24
0121:  MOVF   22,W
0122:  MOVWF  27
0123:  CALL   0D9
0124:  MOVF   23,W
0125:  BSF    03.6
0126:  MOVWF  0D
0127:  BCF    03.6
0128:  MOVF   24,W
0129:  BSF    03.6
012A:  MOVWF  0F
012B:  BCF    03.6
012C:  MOVF   0B,W
012D:  MOVWF  25
012E:  BCF    0B.7
012F:  BSF    03.5
0130:  BSF    03.6
0131:  BSF    0C.7
0132:  BSF    0C.0
0133:  NOP
0134:  NOP
0135:  BCF    03.5
0136:  BCF    03.6
0137:  BTFSC  25.7
0138:  BSF    0B.7
0139:  BSF    03.6
013A:  RLF    0C,W
013B:  RLF    0E,W
013C:  ANDLW  7F
013D:  BTFSC  03.2
013E:  GOTO   159
013F:  BCF    03.6
0140:  MOVWF  22
0141:  BSF    03.6
0142:  MOVF   0D,W
0143:  BCF    03.6
0144:  MOVWF  23
0145:  BSF    03.6
0146:  MOVF   0F,W
0147:  BCF    03.6
0148:  MOVWF  24
0149:  MOVF   22,W
014A:  MOVWF  27
014B:  CALL   0D9
014C:  MOVF   23,W
014D:  BSF    03.6
014E:  MOVWF  0D
014F:  BCF    03.6
0150:  MOVF   24,W
0151:  BSF    03.6
0152:  MOVWF  0F
0153:  INCF   0D,F
0154:  BTFSC  03.2
0155:  INCF   0F,F
0156:  BCF    03.6
0157:  GOTO   105
0158:  BSF    03.6
0159:  BCF    03.6
015A:  RETURN
015B:  MOVF   0B,W
015C:  MOVWF  24
015D:  BCF    0B.7
015E:  BSF    03.5
015F:  BSF    03.6
0160:  BSF    0C.7
0161:  BSF    0C.0
0162:  NOP
0163:  NOP
0164:  BCF    03.5
0165:  BCF    03.6
0166:  BTFSC  24.7
0167:  BSF    0B.7
0168:  BTFSC  03.0
0169:  GOTO   192
016A:  BSF    03.6
016B:  MOVF   0C,W
016C:  ANDLW  7F
016D:  BCF    03.6
016E:  MOVWF  24
016F:  BSF    03.6
0170:  MOVF   0D,W
0171:  BCF    03.6
0172:  MOVWF  25
0173:  BSF    03.6
0174:  MOVF   0F,W
0175:  BCF    03.6
0176:  MOVWF  26
0177:  MOVF   24,W
0178:  MOVWF  27
0179:  CALL   0D9
017A:  MOVF   25,W
017B:  BSF    03.6
017C:  MOVWF  0D
017D:  BCF    03.6
017E:  MOVF   26,W
017F:  BSF    03.6
0180:  MOVWF  0F
0181:  BCF    03.6
0182:  MOVF   0B,W
0183:  MOVWF  27
0184:  BCF    0B.7
0185:  BSF    03.5
0186:  BSF    03.6
0187:  BSF    0C.7
0188:  BSF    0C.0
0189:  NOP
018A:  NOP
018B:  BCF    03.5
018C:  BCF    03.6
018D:  BTFSC  27.7
018E:  BSF    0B.7
018F:  DECFSZ 23,F
0190:  GOTO   192
0191:  GOTO   1B1
0192:  BSF    03.6
0193:  RLF    0C,W
0194:  RLF    0E,W
0195:  ANDLW  7F
0196:  BCF    03.6
0197:  MOVWF  24
0198:  BSF    03.6
0199:  MOVF   0D,W
019A:  BCF    03.6
019B:  MOVWF  25
019C:  BSF    03.6
019D:  MOVF   0F,W
019E:  BCF    03.6
019F:  MOVWF  26
01A0:  MOVF   24,W
01A1:  MOVWF  27
01A2:  CALL   0D9
01A3:  MOVF   25,W
01A4:  BSF    03.6
01A5:  MOVWF  0D
01A6:  BCF    03.6
01A7:  MOVF   26,W
01A8:  BSF    03.6
01A9:  MOVWF  0F
01AA:  INCF   0D,F
01AB:  BTFSC  03.2
01AC:  INCF   0F,F
01AD:  BCF    03.0
01AE:  BCF    03.6
01AF:  DECFSZ 23,F
01B0:  GOTO   15B
01B1:  RETURN
01B2:  MOVF   26,W
01B3:  CLRF   78
01B4:  SUBWF  25,W
01B5:  BTFSC  03.0
01B6:  GOTO   1BA
01B7:  MOVF   25,W
01B8:  MOVWF  77
01B9:  GOTO   1C6
01BA:  CLRF   77
01BB:  MOVLW  08
01BC:  MOVWF  27
01BD:  RLF    25,F
01BE:  RLF    77,F
01BF:  MOVF   26,W
01C0:  SUBWF  77,W
01C1:  BTFSC  03.0
01C2:  MOVWF  77
01C3:  RLF    78,F
01C4:  DECFSZ 27,F
01C5:  GOTO   1BD
01C6:  RETURN
01C7:  MOVF   78,W
01C8:  MOVF   23,W
01C9:  MOVWF  25
01CA:  MOVLW  64
01CB:  MOVWF  26
01CC:  CALL   1B2
01CD:  MOVF   77,W
01CE:  MOVWF  23
01CF:  MOVF   78,W
01D0:  MOVLW  30
01D1:  BTFSS  03.2
01D2:  GOTO   1DA
01D3:  BTFSS  24.1
01D4:  GOTO   1E1
01D5:  BTFSC  24.3
01D6:  GOTO   1E1
01D7:  BTFSC  24.4
01D8:  MOVLW  20
01D9:  GOTO   1DD
01DA:  BCF    24.3
01DB:  BCF    24.4
01DC:  BSF    24.0
01DD:  ADDWF  78,F
01DE:  MOVF   78,W
01DF:  MOVWF  27
01E0:  CALL   0D9
01E1:  MOVF   23,W
01E2:  MOVWF  25
01E3:  MOVLW  0A
01E4:  MOVWF  26
01E5:  CALL   1B2
01E6:  MOVF   77,W
01E7:  MOVWF  23
01E8:  MOVF   78,W
01E9:  MOVLW  30
01EA:  BTFSS  03.2
01EB:  GOTO   1F2
01EC:  BTFSC  24.3
01ED:  GOTO   1F6
01EE:  BTFSS  24.0
01EF:  GOTO   1F6
01F0:  BTFSC  24.4
01F1:  MOVLW  20
01F2:  ADDWF  78,F
01F3:  MOVF   78,W
01F4:  MOVWF  27
01F5:  CALL   0D9
01F6:  MOVLW  30
01F7:  ADDWF  23,F
01F8:  MOVF   23,W
01F9:  MOVWF  27
01FA:  CALL   0D9
01FB:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC = 8//tamaño de bits de resolucion (valores adimencioanles que obtienen un muestreo de una señal digital) 
.................... #fuses INTRC_IO, NOWDT, PROTECT, NOLVP, MCLR, NOLVP, NOBROWNOUT 
.................... #use delay(INTERNAL=4000000) 
*
0022:  MOVLW  28
0023:  MOVWF  04
0024:  BCF    03.7
0025:  MOVF   00,W
0026:  BTFSC  03.2
0027:  GOTO   036
0028:  MOVLW  01
0029:  MOVWF  78
002A:  CLRF   77
002B:  DECFSZ 77,F
002C:  GOTO   02B
002D:  DECFSZ 78,F
002E:  GOTO   02A
002F:  MOVLW  4A
0030:  MOVWF  77
0031:  DECFSZ 77,F
0032:  GOTO   031
0033:  GOTO   034
0034:  DECFSZ 00,F
0035:  GOTO   028
0036:  RETURN
....................  
.................... // se definen las macros simpre antes de llamar a la biblioteca debido a las directivas del lenguaje 
.................... // basicamente es establecer como se conectara la lcd con el micro 
.................... #define LCD_DATA_PORT getenv("SFR:PORTD") 
....................  
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
004F:  MOVLW  0F
0050:  BSF    03.5
0051:  ANDWF  08,W
0052:  IORLW  F0
0053:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0054:  BCF    03.5
0055:  BSF    08.2
....................    delay_cycles(1); 
0056:  NOP
....................    lcd_output_enable(1); 
0057:  BSF    08.0
....................    delay_cycles(1); 
0058:  NOP
....................    high = lcd_read_nibble(); 
0059:  CALL   043
005A:  MOVF   78,W
005B:  MOVWF  2F
....................        
....................    lcd_output_enable(0); 
005C:  BCF    08.0
....................    delay_cycles(1); 
005D:  NOP
....................    lcd_output_enable(1); 
005E:  BSF    08.0
....................    delay_us(1); 
005F:  NOP
....................    low = lcd_read_nibble(); 
0060:  CALL   043
0061:  MOVF   78,W
0062:  MOVWF  2E
....................        
....................    lcd_output_enable(0); 
0063:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0064:  MOVLW  0F
0065:  BSF    03.5
0066:  ANDWF  08,W
0067:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0068:  BCF    03.5
0069:  SWAPF  2F,W
006A:  MOVWF  77
006B:  MOVLW  F0
006C:  ANDWF  77,F
006D:  MOVF   77,W
006E:  IORWF  2E,W
006F:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0043:  MOVF   08,W
0044:  MOVWF  77
0045:  SWAPF  08,W
0046:  ANDLW  0F
0047:  MOVWF  78
....................   #endif 
0048:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0037:  SWAPF  2F,W
0038:  ANDLW  F0
0039:  MOVWF  77
003A:  MOVLW  0F
003B:  ANDWF  08,W
003C:  IORWF  77,W
003D:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
003E:  NOP
....................    lcd_output_enable(1); 
003F:  BSF    08.0
....................    delay_us(2); 
0040:  GOTO   041
....................    lcd_output_enable(0); 
0041:  BCF    08.0
0042:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0049:  BSF    03.5
004A:  BCF    08.0
....................    lcd_rs_tris(); 
004B:  BCF    08.1
....................    lcd_rw_tris(); 
004C:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
004D:  BCF    03.5
004E:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0070:  MOVF   78,W
0071:  MOVWF  2E
0072:  BTFSC  2E.7
0073:  GOTO   04F
....................    lcd_output_rs(address); 
0074:  BTFSS  2C.0
0075:  BCF    08.1
0076:  BTFSC  2C.0
0077:  BSF    08.1
....................    delay_cycles(1); 
0078:  NOP
....................    lcd_output_rw(0); 
0079:  BCF    08.2
....................    delay_cycles(1); 
007A:  NOP
....................    lcd_output_enable(0); 
007B:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
007C:  SWAPF  2D,W
007D:  MOVWF  2E
007E:  MOVLW  0F
007F:  ANDWF  2E,F
0080:  MOVF   2E,W
0081:  MOVWF  2F
0082:  CALL   037
....................    lcd_send_nibble(n & 0xf); 
0083:  MOVF   2D,W
0084:  ANDLW  0F
0085:  MOVWF  2E
0086:  MOVWF  2F
0087:  CALL   037
0088:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
0089:  MOVLW  28
008A:  MOVWF  23
008B:  MOVLW  0C
008C:  MOVWF  24
008D:  MOVLW  01
008E:  MOVWF  25
008F:  MOVLW  06
0090:  MOVWF  26
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
0091:  BCF    08.0
....................    lcd_output_rs(0); 
0092:  BCF    08.1
....................    lcd_output_rw(0); 
0093:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0094:  MOVLW  0F
0095:  BSF    03.5
0096:  ANDWF  08,W
0097:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
0098:  BCF    08.0
....................    lcd_rs_tris(); 
0099:  BCF    08.1
....................    lcd_rw_tris(); 
009A:  BCF    08.2
....................  #endif 
....................      
....................    delay_ms(15); 
009B:  MOVLW  0F
009C:  BCF    03.5
009D:  MOVWF  28
009E:  CALL   022
....................    for(i=1;i<=3;++i) 
009F:  MOVLW  01
00A0:  MOVWF  22
00A1:  MOVF   22,W
00A2:  SUBLW  03
00A3:  BTFSS  03.0
00A4:  GOTO   0AD
....................    { 
....................        lcd_send_nibble(3); 
00A5:  MOVLW  03
00A6:  MOVWF  2F
00A7:  CALL   037
....................        delay_ms(5); 
00A8:  MOVLW  05
00A9:  MOVWF  28
00AA:  CALL   022
00AB:  INCF   22,F
00AC:  GOTO   0A1
....................    } 
....................     
....................    lcd_send_nibble(2); 
00AD:  MOVLW  02
00AE:  MOVWF  2F
00AF:  CALL   037
....................    delay_ms(5); 
00B0:  MOVLW  05
00B1:  MOVWF  28
00B2:  CALL   022
....................    for(i=0;i<=3;++i) 
00B3:  CLRF   22
00B4:  MOVF   22,W
00B5:  SUBLW  03
00B6:  BTFSS  03.0
00B7:  GOTO   0C4
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00B8:  MOVLW  23
00B9:  ADDWF  22,W
00BA:  MOVWF  04
00BB:  BCF    03.7
00BC:  MOVF   00,W
00BD:  MOVWF  27
00BE:  CLRF   2C
00BF:  MOVF   27,W
00C0:  MOVWF  2D
00C1:  CALL   049
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00C2:  INCF   22,F
00C3:  GOTO   0B4
00C4:  BCF    0A.3
00C5:  BCF    0A.4
00C6:  GOTO   22F (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
00C7:  DECFSZ 29,W
00C8:  GOTO   0CA
00C9:  GOTO   0CD
....................       address=LCD_LINE_TWO; 
00CA:  MOVLW  40
00CB:  MOVWF  2A
00CC:  GOTO   0CE
....................    else 
....................       address=0; 
00CD:  CLRF   2A
....................       
....................    address+=x-1; 
00CE:  MOVLW  01
00CF:  SUBWF  28,W
00D0:  ADDWF  2A,F
....................    lcd_send_byte(0,0x80|address); 
00D1:  MOVF   2A,W
00D2:  IORLW  80
00D3:  MOVWF  2B
00D4:  CLRF   2C
00D5:  MOVF   2B,W
00D6:  MOVWF  2D
00D7:  CALL   049
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00D8:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
00D9:  MOVF   27,W
00DA:  XORLW  07
00DB:  BTFSC  03.2
00DC:  GOTO   0E7
00DD:  XORLW  0B
00DE:  BTFSC  03.2
00DF:  GOTO   0EC
00E0:  XORLW  06
00E1:  BTFSC  03.2
00E2:  GOTO   0F4
00E3:  XORLW  02
00E4:  BTFSC  03.2
00E5:  GOTO   0FA
00E6:  GOTO   0FF
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
00E7:  MOVLW  01
00E8:  MOVWF  28
00E9:  MOVWF  29
00EA:  CALL   0C7
00EB:  GOTO   104
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
00EC:  CLRF   2C
00ED:  MOVLW  01
00EE:  MOVWF  2D
00EF:  CALL   049
....................                      delay_ms(2); 
00F0:  MOVLW  02
00F1:  MOVWF  28
00F2:  CALL   022
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
00F3:  GOTO   104
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
00F4:  MOVLW  01
00F5:  MOVWF  28
00F6:  MOVLW  02
00F7:  MOVWF  29
00F8:  CALL   0C7
00F9:  GOTO   104
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
00FA:  CLRF   2C
00FB:  MOVLW  10
00FC:  MOVWF  2D
00FD:  CALL   049
00FE:  GOTO   104
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
00FF:  MOVLW  01
0100:  MOVWF  2C
0101:  MOVF   27,W
0102:  MOVWF  2D
0103:  CALL   049
....................      #endif 
....................    } 
0104:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
....................  
.................... void main(){ 
*
01FC:  MOVF   03,W
01FD:  ANDLW  1F
01FE:  MOVWF  03
01FF:  MOVLW  61
0200:  BSF    03.5
0201:  MOVWF  0F
0202:  MOVF   0F,W
0203:  MOVLW  FF
0204:  BCF    03.5
0205:  MOVWF  20
0206:  BSF    03.5
0207:  BSF    03.6
0208:  MOVF   09,W
0209:  ANDLW  C0
020A:  MOVWF  09
020B:  BCF    03.6
020C:  BCF    1F.4
020D:  BCF    1F.5
020E:  MOVLW  00
020F:  BSF    03.6
0210:  MOVWF  08
0211:  BCF    03.5
0212:  CLRF   07
0213:  CLRF   08
0214:  CLRF   09
0215:  BCF    03.7
....................  
....................    int8 iAdc; //  variable que captura el valor adimencional recibido desde el port analogico 
....................    setup_ccp1(CCP_PWM); // se configura el pin ccp1 como PWD 
0216:  BCF    03.6
0217:  BCF    20.2
0218:  MOVF   20,W
0219:  BSF    03.5
021A:  MOVWF  07
021B:  BCF    03.5
021C:  BCF    07.2
021D:  MOVLW  0C
021E:  MOVWF  17
021F:  BSF    03.5
0220:  CLRF   1B
0221:  CLRF   1C
0222:  MOVLW  01
0223:  MOVWF  1D
....................    setup_timer_2(T2_DIV_BY_16, 255,1); 
0224:  MOVLW  00
0225:  MOVWF  78
0226:  IORLW  06
0227:  BCF    03.5
0228:  MOVWF  12
0229:  MOVLW  FF
022A:  BSF    03.5
022B:  MOVWF  12
....................    set_pwm1_duty(0); // se pone el ciclo de trabajo en 0 para su inicializacion (0%) 
022C:  BCF    03.5
022D:  CLRF   15
....................     
....................     
....................    lcd_init(); 
022E:  GOTO   089
....................    setup_adc_ports(sAN0); // se confitgura el puerto que servira como analogico 
022F:  BSF    03.5
0230:  BSF    03.6
0231:  MOVF   09,W
0232:  ANDLW  C0
0233:  MOVWF  09
0234:  BCF    03.6
0235:  BCF    1F.4
0236:  BCF    1F.5
0237:  MOVLW  01
0238:  BSF    03.6
0239:  MOVWF  08
....................    setup_adc(ADC_CLOCK_INTERNAL); 
023A:  BCF    03.5
023B:  BCF    03.6
023C:  BSF    1F.6
023D:  BSF    1F.7
023E:  BSF    03.5
023F:  BCF    1F.7
0240:  BCF    03.5
0241:  BSF    1F.0
....................    //codigo para comprobar un funcionamiento previo al circuito 
....................    lcd_putc("\fReady...\n"); 
0242:  MOVLW  04
0243:  BSF    03.6
0244:  MOVWF  0D
0245:  MOVLW  00
0246:  MOVWF  0F
0247:  BCF    03.6
0248:  CALL   105
....................    delay_ms(2000); 
0249:  MOVLW  08
024A:  MOVWF  22
024B:  MOVLW  FA
024C:  MOVWF  28
024D:  CALL   022
024E:  DECFSZ 22,F
024F:  GOTO   24B
....................    // basicamente le da el giro al motor 
....................    output_high(PIN_C0); 
0250:  BCF    20.0
0251:  MOVF   20,W
0252:  BSF    03.5
0253:  MOVWF  07
0254:  BCF    03.5
0255:  BSF    07.0
....................    output_low(PIN_C1); 
0256:  BCF    20.1
0257:  MOVF   20,W
0258:  BSF    03.5
0259:  MOVWF  07
025A:  BCF    03.5
025B:  BCF    07.1
....................     
....................     
....................    while(TRUE){ 
....................        
....................       set_adc_channel(0); //configura el AN0 como entrada analogica 
025C:  MOVLW  00
025D:  MOVWF  78
025E:  MOVF   1F,W
025F:  ANDLW  C3
0260:  IORWF  78,W
0261:  MOVWF  1F
....................       delay_ms(10); 
0262:  MOVLW  0A
0263:  MOVWF  28
0264:  CALL   022
....................       iAdc = read_adc(); // asocia el valor leido desde el puerto adc a la variable previamente definida   
0265:  BSF    1F.1
0266:  BTFSC  1F.1
0267:  GOTO   266
0268:  MOVF   1E,W
0269:  MOVWF  21
....................              
....................         
....................       printf(lcd_putc, "\f"); 
026A:  MOVLW  0C
026B:  MOVWF  27
026C:  CALL   0D9
....................        
....................        
....................       if(iAdc == 127){ 
026D:  MOVF   21,W
026E:  SUBLW  7F
026F:  BTFSS  03.2
0270:  GOTO   296
....................          output_low(PIN_C4); 
0271:  BCF    20.4
0272:  MOVF   20,W
0273:  BSF    03.5
0274:  MOVWF  07
0275:  BCF    03.5
0276:  BCF    07.4
....................          output_low(PIN_C5); 
0277:  BCF    20.5
0278:  MOVF   20,W
0279:  BSF    03.5
027A:  MOVWF  07
027B:  BCF    03.5
027C:  BCF    07.5
....................          set_pwm1_duty(0); 
027D:  CLRF   15
....................          lcd_gotoxy(1,1); 
027E:  MOVLW  01
027F:  MOVWF  28
0280:  MOVWF  29
0281:  CALL   0C7
....................          printf(lcd_putc,"Reposo"); 
0282:  MOVLW  0A
0283:  BSF    03.6
0284:  MOVWF  0D
0285:  MOVLW  00
0286:  MOVWF  0F
0287:  BCF    03.6
0288:  CALL   105
....................          lcd_gotoxy(1,2); 
0289:  MOVLW  01
028A:  MOVWF  28
028B:  MOVLW  02
028C:  MOVWF  29
028D:  CALL   0C7
....................          printf(lcd_putc, "Vel=0"); 
028E:  MOVLW  0E
028F:  BSF    03.6
0290:  MOVWF  0D
0291:  MOVLW  00
0292:  MOVWF  0F
0293:  BCF    03.6
0294:  CALL   105
....................       } 
0295:  GOTO   30F
....................       else if(iAdc > 127){ 
0296:  MOVF   21,W
0297:  SUBLW  7F
0298:  BTFSC  03.0
0299:  GOTO   2D7
....................          output_high(PIN_C4); 
029A:  BCF    20.4
029B:  MOVF   20,W
029C:  BSF    03.5
029D:  MOVWF  07
029E:  BCF    03.5
029F:  BSF    07.4
....................          output_low(PIN_C5); 
02A0:  BCF    20.5
02A1:  MOVF   20,W
02A2:  BSF    03.5
02A3:  MOVWF  07
02A4:  BCF    03.5
02A5:  BCF    07.5
....................          set_pwm1_duty(((iAdc-127)*2)-1); 
02A6:  MOVLW  7F
02A7:  SUBWF  21,W
02A8:  MOVWF  77
02A9:  BCF    03.0
02AA:  RLF    77,F
02AB:  MOVF   77,W
02AC:  ADDLW  FF
02AD:  MOVWF  22
02AE:  MOVWF  15
....................          lcd_gotoxy(1,1); 
02AF:  MOVLW  01
02B0:  MOVWF  28
02B1:  MOVWF  29
02B2:  CALL   0C7
....................          printf(lcd_putc,"Derecha"); 
02B3:  MOVLW  11
02B4:  BSF    03.6
02B5:  MOVWF  0D
02B6:  MOVLW  00
02B7:  MOVWF  0F
02B8:  BCF    03.6
02B9:  CALL   105
....................          lcd_gotoxy(1,2); 
02BA:  MOVLW  01
02BB:  MOVWF  28
02BC:  MOVLW  02
02BD:  MOVWF  29
02BE:  CALL   0C7
....................          printf(lcd_putc, "Vel=%u",((iAdc-127)*2)-1); 
02BF:  MOVLW  7F
02C0:  SUBWF  21,W
02C1:  MOVWF  77
02C2:  BCF    03.0
02C3:  RLF    77,F
02C4:  MOVF   77,W
02C5:  ADDLW  FF
02C6:  MOVWF  22
02C7:  MOVLW  15
02C8:  BSF    03.6
02C9:  MOVWF  0D
02CA:  MOVLW  00
02CB:  MOVWF  0F
02CC:  BCF    03.0
02CD:  MOVLW  04
02CE:  BCF    03.6
02CF:  MOVWF  23
02D0:  CALL   15B
02D1:  MOVF   22,W
02D2:  MOVWF  23
02D3:  MOVLW  1B
02D4:  MOVWF  24
02D5:  CALL   1C7
....................       } 
02D6:  GOTO   30F
....................       else{ 
....................          output_low(PIN_C4); 
02D7:  BCF    20.4
02D8:  MOVF   20,W
02D9:  BSF    03.5
02DA:  MOVWF  07
02DB:  BCF    03.5
02DC:  BCF    07.4
....................          output_high(PIN_C5); 
02DD:  BCF    20.5
02DE:  MOVF   20,W
02DF:  BSF    03.5
02E0:  MOVWF  07
02E1:  BCF    03.5
02E2:  BSF    07.5
....................          set_pwm1_duty(((127-iAdc)*2)); 
02E3:  MOVF   21,W
02E4:  SUBLW  7F
02E5:  MOVWF  77
02E6:  BCF    03.0
02E7:  RLF    77,W
02E8:  MOVWF  22
02E9:  MOVWF  15
....................          lcd_gotoxy(1,1); 
02EA:  MOVLW  01
02EB:  MOVWF  28
02EC:  MOVWF  29
02ED:  CALL   0C7
....................          printf(lcd_putc,"Izquierda"); 
02EE:  MOVLW  19
02EF:  BSF    03.6
02F0:  MOVWF  0D
02F1:  MOVLW  00
02F2:  MOVWF  0F
02F3:  BCF    03.6
02F4:  CALL   105
....................          lcd_gotoxy(1,2); 
02F5:  MOVLW  01
02F6:  MOVWF  28
02F7:  MOVLW  02
02F8:  MOVWF  29
02F9:  CALL   0C7
....................          printf(lcd_putc, "Vel=%u",((127-iAdc)*2)); 
02FA:  MOVF   21,W
02FB:  SUBLW  7F
02FC:  MOVWF  77
02FD:  BCF    03.0
02FE:  RLF    77,W
02FF:  MOVWF  22
0300:  MOVLW  1E
0301:  BSF    03.6
0302:  MOVWF  0D
0303:  MOVLW  00
0304:  MOVWF  0F
0305:  BCF    03.0
0306:  MOVLW  04
0307:  BCF    03.6
0308:  MOVWF  23
0309:  CALL   15B
030A:  MOVF   22,W
030B:  MOVWF  23
030C:  MOVLW  1B
030D:  MOVWF  24
030E:  CALL   1C7
....................       } 
....................        
....................             
....................        
....................       delay_ms(100); 
030F:  MOVLW  64
0310:  MOVWF  28
0311:  CALL   022
0312:  GOTO   25C
....................    } 
.................... } 
0313:  SLEEP

Configuration Fuses:
   Word  1: 2CA4   INTRC_IO NOWDT PUT MCLR PROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
